'use client';

import Link from 'next/link';

import { useAppDispatch, useAppSelector } from '@/store/store';
import {
	selectCartItems,
	selectCartTotalPrice,
} from '@/store/cart/cart.selectors';
import { cartActions } from '@/store/cart/cart.slice';

import { StrapiImage } from '@/components/ui/StrapiImage';

import { CartItem } from '@/store/cart/cart.types';

export default function CartPage() {
	const dispatch = useAppDispatch();
	const cartItems = useAppSelector(selectCartItems);
	const totalPrice = useAppSelector(selectCartTotalPrice);

	// –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞
	const handleIncrease = (item: CartItem) => {
		dispatch(cartActions.addItem(item));
	};

	// –£–º–µ–Ω—å—à–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º (–µ—Å–ª–∏ 1 —à—Ç. - —É–¥–∞–ª—è–µ—Ç—Å—è –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã)
	const handleDecrease = (item: CartItem) => {
		if (item.quantity === 1) {
			const confirmRemove = window.confirm(
				'–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã?'
			);

			if (confirmRemove) {
				dispatch(
					cartActions.removeItem({
						id: item.id,
						selectedWeight: item.selectedWeight,
					})
				);
			}
		} else {
			dispatch(
				cartActions.decreaseItem({
					id: item.id,
					selectedWeight: item.selectedWeight,
				})
			);
		}
	};

	// –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
	const handleRemoveItem = (item: CartItem) => {
		const confirmRemove = window.confirm(
			'–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã?'
		);

		if (confirmRemove) {
			dispatch(
				cartActions.removeItem({
					id: item.id,
					selectedWeight: item.selectedWeight,
				})
			);
		}
	};

	// –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ–π –∫–æ—Ä–∑–∏–Ω—ã
	const handleClearCart = () => {
		dispatch(cartActions.clearCart());
	};

	return (
		<div className="cart">
			<h2>–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞</h2>

			{cartItems.length === 0 ? (
				<p>–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞</p>
			) : (
				<>
					<ul>
						{cartItems.map((item) => {
							// –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –Ω–∞ –æ—Å–Ω–æ–≤–µ id –∏ selectedWeight
							const uniqueKey = `${item.id}-${item.selectedWeight?.value}`;

							return (
								<li key={uniqueKey} className="cart-item">
									<Link
										href={`/products/${item.slug}`}
										className="cart-item__image -ibg"
									>
										<StrapiImage
											src={item.image.url}
											alt={
												item.image.alternativeText ||
												'No alternative text provided'
											}
											fill
										/>
									</Link>
									<div className="cart-item__info">
										<h3>{item.title}</h3>
										<p>–¶–µ–Ω–∞: {item.price} ‚ÇΩ</p>

										{/* –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–µ—Å */}
										<p>
											–í–µ—Å: {item.selectedWeight?.value}{' '}
											{item.selectedWeight?.unit}
										</p>
									</div>
									<div className="cart-item__controls">
										<button onClick={() => handleDecrease(item)}>‚ûñ</button>
										<span>{item.quantity}</span>
										<button onClick={() => handleIncrease(item)}>‚ûï</button>
										<button onClick={() => handleRemoveItem(item)}>üóë</button>
									</div>
								</li>
							);
						})}
					</ul>
					<div className="cart-footer">
						<h2>–û–±—â–∞—è —Å—É–º–º–∞: {totalPrice} ‚ÇΩ</h2>
						<button onClick={handleClearCart}>–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É</button>
					</div>
				</>
			)}
		</div>
	);
}
